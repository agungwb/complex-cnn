import numpy as np


def load_data(max_range, dimension):
    training_data = list()
    test_data = list()

    # input = np.random.randint(max_range, size=dimension)
    input = np.array([
        [1, 2, 3, 4, 5, 6, 7, 7, 6, 5, 4, 3, 2, 1],
        [1, 2, 3, 4, 5, 6, 7, 7, 6, 5, 4, 3, 2, 1],
        [1, 2, 3, 4, 5, 6, 7, 7, 6, 5, 4, 3, 2, 1],
        [1, 2, 3, 4, 5, 6, 7, 7, 6, 5, 4, 3, 2, 1],
        [1, 2, 3, 4, 5, 6, 7, 7, 6, 5, 4, 3, 2, 1],
        [1, 2, 3, 4, 5, 6, 7, 7, 6, 5, 4, 3, 2, 1],
        [1, 2, 3, 4, 5, 6, 7, 7, 6, 5, 4, 3, 2, 1],
        [1, 2, 3, 4, 5, 6, 7, 7, 6, 5, 4, 3, 2, 1],
        [1, 2, 3, 4, 5, 6, 7, 7, 6, 5, 4, 3, 2, 1],
        [1, 2, 3, 4, 5, 6, 7, 7, 6, 5, 4, 3, 2, 1],
        [1, 2, 3, 4, 5, 6, 7, 7, 6, 5, 4, 3, 2, 1],
        [1, 2, 3, 4, 5, 6, 7, 7, 6, 5, 4, 3, 2, 1],
        [1, 2, 3, 4, 5, 6, 7, 7, 6, 5, 4, 3, 2, 1],
        [1, 2, 3, 4, 5, 6, 7, 7, 6, 5, 4, 3, 2, 1],
    ])

    output = np.array([[1]])
    training_data.append(tuple((input, output)))
    # test_data.append(tuple((input, output)))

    # input = np.random.randint(max_range, size=dimension)
    input = np.array([
        [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.7, 0.6, 0.5, 0.4, 0.3, 0.2, 0.1],
        [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.7, 0.6, 0.5, 0.4, 0.3, 0.2, 0.1],
        [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.7, 0.6, 0.5, 0.4, 0.3, 0.2, 0.1],
        [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.7, 0.6, 0.5, 0.4, 0.3, 0.2, 0.1],
        [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.7, 0.6, 0.5, 0.4, 0.3, 0.2, 0.1],
        [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.7, 0.6, 0.5, 0.4, 0.3, 0.2, 0.1],
        [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.7, 0.6, 0.5, 0.4, 0.3, 0.2, 0.1],
        [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.7, 0.6, 0.5, 0.4, 0.3, 0.2, 0.1],
        [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.7, 0.6, 0.5, 0.4, 0.3, 0.2, 0.1],
        [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.7, 0.6, 0.5, 0.4, 0.3, 0.2, 0.1],
        [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.7, 0.6, 0.5, 0.4, 0.3, 0.2, 0.1],
        [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.7, 0.6, 0.5, 0.4, 0.3, 0.2, 0.1],
        [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.7, 0.6, 0.5, 0.4, 0.3, 0.2, 0.1],
        [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.7, 0.6, 0.5, 0.4, 0.3, 0.2, 0.1],
    ])
    output = np.array([[1]])
    # training_data.append(tuple((input, output)))
    test_data.append(tuple((input, output)))

    return (training_data, test_data)


def load_data_complex(max_range, dimension):
    training_data = list()
    test_data = list()

    # input = np.random.randint(max_range, size=dimension)
    input = np.array([
        [1+1j, 2+2j, 3+3j, 4+4j, 5+5j, 6+6j, 7+7j, 7+7j, 6+6j, 5+5j, 4+4j, 3+3j, 2+2j, 1+1j],
        [1+1j, 2+2j, 3+3j, 4+4j, 5+5j, 6+6j, 7+7j, 7+7j, 6+6j, 5+5j, 4+4j, 3+3j, 2+2j, 1+1j],
        [1+1j, 2+2j, 3+3j, 4+4j, 5+5j, 6+6j, 7+7j, 7+7j, 6+6j, 5+5j, 4+4j, 3+3j, 2+2j, 1+1j],
        [1+1j, 2+2j, 3+3j, 4+4j, 5+5j, 6+6j, 7+7j, 7+7j, 6+6j, 5+5j, 4+4j, 3+3j, 2+2j, 1+1j],
        [1+1j, 2+2j, 3+3j, 4+4j, 5+5j, 6+6j, 7+7j, 7+7j, 6+6j, 5+5j, 4+4j, 3+3j, 2+2j, 1+1j],
        [1+1j, 2+2j, 3+3j, 4+4j, 5+5j, 6+6j, 7+7j, 7+7j, 6+6j, 5+5j, 4+4j, 3+3j, 2+2j, 1+1j],
        [1+1j, 2+2j, 3+3j, 4+4j, 5+5j, 6+6j, 7+7j, 7+7j, 6+6j, 5+5j, 4+4j, 3+3j, 2+2j, 1+1j],
        [1+1j, 2+2j, 3+3j, 4+4j, 5+5j, 6+6j, 7+7j, 7+7j, 6+6j, 5+5j, 4+4j, 3+3j, 2+2j, 1+1j],
        [1+1j, 2+2j, 3+3j, 4+4j, 5+5j, 6+6j, 7+7j, 7+7j, 6+6j, 5+5j, 4+4j, 3+3j, 2+2j, 1+1j],
        [1+1j, 2+2j, 3+3j, 4+4j, 5+5j, 6+6j, 7+7j, 7+7j, 6+6j, 5+5j, 4+4j, 3+3j, 2+2j, 1+1j],
        [1+1j, 2+2j, 3+3j, 4+4j, 5+5j, 6+6j, 7+7j, 7+7j, 6+6j, 5+5j, 4+4j, 3+3j, 2+2j, 1+1j],
        [1+1j, 2+2j, 3+3j, 4+4j, 5+5j, 6+6j, 7+7j, 7+7j, 6+6j, 5+5j, 4+4j, 3+3j, 2+2j, 1+1j],
        [1+1j, 2+2j, 3+3j, 4+4j, 5+5j, 6+6j, 7+7j, 7+7j, 6+6j, 5+5j, 4+4j, 3+3j, 2+2j, 1+1j],
        [1+1j, 2+2j, 3+3j, 4+4j, 5+5j, 6+6j, 7+7j, 7+7j, 6+6j, 5+5j, 4+4j, 3+3j, 2+2j, 1+1j],
    ])

    output = np.array([[1]])
    training_data.append(tuple((input, output)))
    # test_data.append(tuple((input, output)))

    # input = np.random.randint(max_range, size=dimension)
    input = np.array([
        [0.1+0.1j, 0.2+0.2j, 0.3+0.3j, 0.4+0.4j, 0.5+0.5j, 0.6+0.6j, 0.7+0.7j, 0.7+0.7j, 0.6+0.6j, 0.5+0.5j, 0.4+0.4j, 0.3+0.3j, 0.2+0.2j, 0.1+0.1j],
        [0.1+0.1j, 0.2+0.2j, 0.3+0.3j, 0.4+0.4j, 0.5+0.5j, 0.6+0.6j, 0.7+0.7j, 0.7+0.7j, 0.6+0.6j, 0.5+0.5j, 0.4+0.4j, 0.3+0.3j, 0.2+0.2j, 0.1+0.1j],
        [0.1+0.1j, 0.2+0.2j, 0.3+0.3j, 0.4+0.4j, 0.5+0.5j, 0.6+0.6j, 0.7+0.7j, 0.7+0.7j, 0.6+0.6j, 0.5+0.5j, 0.4+0.4j, 0.3+0.3j, 0.2+0.2j, 0.1+0.1j],
        [0.1+0.1j, 0.2+0.2j, 0.3+0.3j, 0.4+0.4j, 0.5+0.5j, 0.6+0.6j, 0.7+0.7j, 0.7+0.7j, 0.6+0.6j, 0.5+0.5j, 0.4+0.4j, 0.3+0.3j, 0.2+0.2j, 0.1+0.1j],
        [0.1+0.1j, 0.2+0.2j, 0.3+0.3j, 0.4+0.4j, 0.5+0.5j, 0.6+0.6j, 0.7+0.7j, 0.7+0.7j, 0.6+0.6j, 0.5+0.5j, 0.4+0.4j, 0.3+0.3j, 0.2+0.2j, 0.1+0.1j],
        [0.1+0.1j, 0.2+0.2j, 0.3+0.3j, 0.4+0.4j, 0.5+0.5j, 0.6+0.6j, 0.7+0.7j, 0.7+0.7j, 0.6+0.6j, 0.5+0.5j, 0.4+0.4j, 0.3+0.3j, 0.2+0.2j, 0.1+0.1j],
        [0.1+0.1j, 0.2+0.2j, 0.3+0.3j, 0.4+0.4j, 0.5+0.5j, 0.6+0.6j, 0.7+0.7j, 0.7+0.7j, 0.6+0.6j, 0.5+0.5j, 0.4+0.4j, 0.3+0.3j, 0.2+0.2j, 0.1+0.1j],
        [0.1+0.1j, 0.2+0.2j, 0.3+0.3j, 0.4+0.4j, 0.5+0.5j, 0.6+0.6j, 0.7+0.7j, 0.7+0.7j, 0.6+0.6j, 0.5+0.5j, 0.4+0.4j, 0.3+0.3j, 0.2+0.2j, 0.1+0.1j],
        [0.1+0.1j, 0.2+0.2j, 0.3+0.3j, 0.4+0.4j, 0.5+0.5j, 0.6+0.6j, 0.7+0.7j, 0.7+0.7j, 0.6+0.6j, 0.5+0.5j, 0.4+0.4j, 0.3+0.3j, 0.2+0.2j, 0.1+0.1j],
        [0.1+0.1j, 0.2+0.2j, 0.3+0.3j, 0.4+0.4j, 0.5+0.5j, 0.6+0.6j, 0.7+0.7j, 0.7+0.7j, 0.6+0.6j, 0.5+0.5j, 0.4+0.4j, 0.3+0.3j, 0.2+0.2j, 0.1+0.1j],
        [0.1+0.1j, 0.2+0.2j, 0.3+0.3j, 0.4+0.4j, 0.5+0.5j, 0.6+0.6j, 0.7+0.7j, 0.7+0.7j, 0.6+0.6j, 0.5+0.5j, 0.4+0.4j, 0.3+0.3j, 0.2+0.2j, 0.1+0.1j],
        [0.1+0.1j, 0.2+0.2j, 0.3+0.3j, 0.4+0.4j, 0.5+0.5j, 0.6+0.6j, 0.7+0.7j, 0.7+0.7j, 0.6+0.6j, 0.5+0.5j, 0.4+0.4j, 0.3+0.3j, 0.2+0.2j, 0.1+0.1j],
        [0.1+0.1j, 0.2+0.2j, 0.3+0.3j, 0.4+0.4j, 0.5+0.5j, 0.6+0.6j, 0.7+0.7j, 0.7+0.7j, 0.6+0.6j, 0.5+0.5j, 0.4+0.4j, 0.3+0.3j, 0.2+0.2j, 0.1+0.1j],
        [0.1+0.1j, 0.2+0.2j, 0.3+0.3j, 0.4+0.4j, 0.5+0.5j, 0.6+0.6j, 0.7+0.7j, 0.7+0.7j, 0.6+0.6j, 0.5+0.5j, 0.4+0.4j, 0.3+0.3j, 0.2+0.2j, 0.1+0.1j],
    ])
    output = np.array([[1]])
    # training_data.append(tuple((input, output)))
    test_data.append(tuple((input, output)))

    return (training_data, test_data)